{"version":3,"file":"keychain.cjs.development.js","sources":["../src/nodes/app-node.ts","../src/nodes/apps-node.ts","../src/nodes/identity-address-owner-node.ts","../src/utils/index.ts","../src/encryption/encrypt.ts","../src/utils/gaia.ts","../src/identity.ts","../src/wallet.ts","../src/index.ts"],"sourcesContent":["import { BIP32Interface } from 'bip32'\nimport { getAddress } from '../utils'\n\nexport default class AppNode {\n  hdNode: BIP32Interface\n\n  appDomain: string\n\n  constructor(hdNode: BIP32Interface, appDomain: string) {\n    this.hdNode = hdNode\n    this.appDomain = appDomain\n  }\n\n  getAppPrivateKey() {\n    if (!this.hdNode.privateKey) {\n      throw new Error('Node does not have private key')\n    }\n    return this.hdNode.privateKey.toString('hex')\n  }\n\n  getAddress() {\n    return getAddress(this.hdNode)\n  }\n}\n","import { BIP32Interface } from 'bip32'\nimport { createHash } from 'crypto-browserify'\nimport { hashCode } from '../utils'\nimport AppNode from './app-node'\n\nexport default class AppsNode {\n  hdNode: BIP32Interface\n\n  salt: string\n\n  constructor(appsHdNode: BIP32Interface, salt: string) {\n    this.hdNode = appsHdNode\n    this.salt = salt\n  }\n\n  getNode() {\n    return this.hdNode\n  }\n\n  getAppNode(appDomain: string) {\n    const hash = createHash('sha256')\n      .update(`${appDomain}${this.salt}`)\n      .digest('hex')\n    const appIndex = hashCode(hash)\n    const appNode = this.hdNode.deriveHardened(appIndex)\n    return new AppNode(appNode, appDomain)\n  }\n\n  toBase58() {\n    return this.hdNode.toBase58()\n  }\n\n  getSalt() {\n    return this.salt\n  }\n}\n","import { BIP32Interface } from 'bip32'\nimport { getAddress } from '../utils'\nimport AppsNode from './apps-node'\n\nconst APPS_NODE_INDEX = 0\nconst SIGNING_NODE_INDEX = 1\nconst ENCRYPTION_NODE_INDEX = 2\n\nexport default class IdentityAddressOwnerNode {\n  hdNode: BIP32Interface\n\n  salt: string\n\n  constructor(ownerHdNode: BIP32Interface, salt: string) {\n    this.hdNode = ownerHdNode\n    this.salt = salt\n  }\n\n  getNode() {\n    return this.hdNode\n  }\n\n  getSalt() {\n    return this.salt\n  }\n\n  getIdentityKey() {\n    if (!this.hdNode.privateKey) {\n      throw new Error('Node does not have private key')\n    }\n    return this.hdNode.privateKey.toString('hex')\n  }\n\n  getIdentityKeyID() {\n    return this.hdNode.publicKey.toString('hex')\n  }\n\n  getAppsNode() {\n    return new AppsNode(this.hdNode.deriveHardened(APPS_NODE_INDEX), this.salt)\n  }\n\n  getAddress() {\n    // return this.hdNode.getAddress()\n    return getAddress(this.hdNode)\n  }\n\n  getEncryptionNode() {\n    return this.hdNode.deriveHardened(ENCRYPTION_NODE_INDEX)\n  }\n\n  getSigningNode() {\n    return this.hdNode.deriveHardened(SIGNING_NODE_INDEX)\n  }\n}\n","import { BIP32Interface } from 'bip32'\nimport { address, networks, crypto } from 'bitcoinjs-lib'\nimport { createHash } from 'crypto-browserify'\nimport IdentityAddressOwnerNode from '../nodes/identity-address-owner-node'\n\nconst IDENTITY_KEYCHAIN = 888\nconst BLOCKSTACK_ON_BITCOIN = 0\nexport function getIdentityPrivateKeychain(masterKeychain: BIP32Interface) {\n  return masterKeychain\n    .deriveHardened(IDENTITY_KEYCHAIN)\n    .deriveHardened(BLOCKSTACK_ON_BITCOIN)\n}\n\nconst EXTERNAL_ADDRESS = 'EXTERNAL_ADDRESS'\nconst CHANGE_ADDRESS = 'CHANGE_ADDRESS'\n\nexport function getBitcoinPrivateKeychain(masterKeychain: BIP32Interface) {\n  const BIP_44_PURPOSE = 44\n  const BITCOIN_COIN_TYPE = 0\n  const ACCOUNT_INDEX = 0\n\n  return masterKeychain\n    .deriveHardened(BIP_44_PURPOSE)\n    .deriveHardened(BITCOIN_COIN_TYPE)\n    .deriveHardened(ACCOUNT_INDEX)\n}\n\nexport function getBitcoinAddressNode(\n  bitcoinKeychain: BIP32Interface,\n  addressIndex = 0,\n  chainType = EXTERNAL_ADDRESS\n) {\n  let chain = null\n\n  if (chainType === EXTERNAL_ADDRESS) {\n    chain = 0\n  } else if (chainType === CHANGE_ADDRESS) {\n    chain = 1\n  } else {\n    throw new Error('Invalid chain type')\n  }\n\n  return bitcoinKeychain.derive(chain).derive(addressIndex)\n}\n\nexport function getIdentityOwnerAddressNode(\n  identityPrivateKeychain: BIP32Interface,\n  identityIndex = 0\n) {\n  if (identityPrivateKeychain.isNeutered()) {\n    throw new Error('You need the private key to generate identity addresses')\n  }\n\n  const publicKeyHex = identityPrivateKeychain\n    .publicKey\n    .toString('hex')\n  const salt = createHash('sha256')\n    .update(publicKeyHex)\n    .digest('hex')\n\n  return new IdentityAddressOwnerNode(\n    identityPrivateKeychain.deriveHardened(identityIndex),\n    salt\n  )\n}\n\n// HDNode is no longer a part of bitcoinjs-lib\n// This function is taken from https://github.com/bitcoinjs/bitcoinjs-lib/pull/1073/files#diff-1f03b6ff764c499bfbdf841bf8fc113eR10\nexport function getAddress(node: BIP32Interface) {\n  return address.toBase58Check(\n    crypto.hash160(node.publicKey),\n    networks.bitcoin.pubKeyHash\n  )\n}\n\nexport function hashCode(string: string) {\n  let hash = 0\n  if (string.length === 0) return hash\n  for (let i = 0; i < string.length; i++) {\n    const character = string.charCodeAt(i)\n    hash = (hash << 5) - hash + character\n    hash &= hash\n  }\n  return hash & 0x7fffffff\n}\n\nexport interface IdentityKeyPair {\n  key: string\n  keyID: string\n  address: string\n  appsNodeKey: string\n  salt: string\n}\n\nexport function deriveIdentityKeyPair(identityOwnerAddressNode: IdentityAddressOwnerNode): IdentityKeyPair {\n  const address = identityOwnerAddressNode.getAddress()\n  const identityKey = identityOwnerAddressNode.getIdentityKey()\n  const identityKeyID = identityOwnerAddressNode.getIdentityKeyID()\n  const appsNode = identityOwnerAddressNode.getAppsNode()\n  const keyPair = {\n    key: identityKey,\n    keyID: identityKeyID,\n    address,\n    appsNodeKey: appsNode.toBase58(),\n    salt: appsNode.getSalt()\n  }\n  return keyPair\n}\n\nexport function getBlockchainIdentities(\n  masterKeychain: BIP32Interface,\n  identitiesToGenerate: number) {\n  const identityPrivateKeychainNode = getIdentityPrivateKeychain(\n    masterKeychain\n  )\n  const bitcoinPrivateKeychainNode = getBitcoinPrivateKeychain(\n    masterKeychain\n  )\n\n  const identityPublicKeychainNode = identityPrivateKeychainNode.neutered()\n  const identityPublicKeychain = identityPublicKeychainNode.toBase58()\n\n  const bitcoinPublicKeychainNode = bitcoinPrivateKeychainNode.neutered()\n  const bitcoinPublicKeychain = bitcoinPublicKeychainNode.toBase58()\n\n  const firstBitcoinAddress = getAddress(getBitcoinAddressNode(bitcoinPublicKeychainNode))\n\n  const identityAddresses = []\n  const identityKeypairs = []\n\n  // We pre-generate a number of identity addresses so that we\n  // don't have to prompt the user for the password on each new profile\n  for (\n    let addressIndex = 0;\n    addressIndex < identitiesToGenerate;\n    addressIndex++\n  ) {\n    const identityOwnerAddressNode = getIdentityOwnerAddressNode(\n      identityPrivateKeychainNode,\n      addressIndex\n    )\n    const identityKeyPair = deriveIdentityKeyPair(\n      identityOwnerAddressNode\n    )\n    identityKeypairs.push(identityKeyPair)\n    identityAddresses.push(\n      identityKeyPair.address\n    )\n  }\n\n  return {\n    identityPublicKeychain,\n    bitcoinPublicKeychain,\n    firstBitcoinAddress,\n    identityAddresses,\n    identityKeypairs\n  }\n}\n","import { mnemonicToEntropy, validateMnemonic } from 'bip39'\nimport {\n  randomBytes,\n  pbkdf2Sync,\n  createCipheriv,\n  createHmac\n} from 'crypto-browserify'\n\n// eslint-disable-next-line @typescript-eslint/require-await\nasync function normalizeMnemonic(mnemonic: string) {\n  // Note: Future-proofing with async wrappers around any synchronous cryptographic code.\n  return mnemonicToEntropy(mnemonic)\n}\n\nasync function encryptMnemonic(\n  mnemonic: string,\n  password: string\n): Promise<Buffer> {\n  // must be bip39 mnemonic\n  if (!validateMnemonic(mnemonic)) {\n    throw new Error('Not a valid bip39 nmemonic')\n  }\n\n  // normalize plaintext to fixed length byte string\n  const normalizedMnemonic = await normalizeMnemonic(mnemonic)\n  const plaintextNormalized = Buffer.from(normalizedMnemonic, 'hex')\n\n  // AES-128-CBC with SHA256 HMAC\n  const salt = randomBytes(16)\n  const keysAndIV = pbkdf2Sync(password, salt, 100000, 48, 'sha512')\n  const encKey = keysAndIV.slice(0, 16)\n  const macKey = keysAndIV.slice(16, 32)\n  const iv = keysAndIV.slice(32, 48)\n\n  const cipher = createCipheriv('aes-128-cbc', encKey, iv)\n  let cipherText = cipher.update(plaintextNormalized).toString('hex')\n  cipherText += cipher.final('hex')\n\n  const hmacPayload = Buffer.concat([salt, Buffer.from(cipherText, 'hex')])\n\n  const hmac = createHmac('sha256', macKey)\n  hmac.update(hmacPayload)\n  const hmacDigest = hmac.digest()\n\n  return Buffer.concat([salt, hmacDigest, Buffer.from(cipherText, 'hex')])\n}\n\nexport async function encryptMain(mnemonic: string, password: string) {\n  // logger.debug(\"Encrypting from worker\", mnemonic, password);\n  const encryptedBuffer = await encryptMnemonic(mnemonic, password)\n  return encryptedBuffer.toString('hex')\n}\n\nexport async function encrypt(plaintextBuffer: Buffer, password: string) {\n  const mnemonic = plaintextBuffer.toString()\n  const encryptedMnemonicHex = await encryptMain(mnemonic, password)\n  return encryptedMnemonicHex\n  // const encryptedBuffer = await encryptMnemonic(mnemonic, password);\n  // return encryptedBuffer.toString(\"hex\");\n}\n","import { randomBytes } from 'crypto-browserify'\nimport { TokenSigner } from 'jsontokens'\nimport { getPublicKeyFromPrivate } from 'blockstack'\n\nexport const getHubInfo = async (hubUrl: string) => {\n  const response = await fetch(`${hubUrl}/hub_info`)\n  const data = await response.json()\n  return data\n}\n\nexport const getHubPrefix = async (hubUrl: string) => {\n  const { read_url_prefix } = await getHubInfo(hubUrl)\n  return read_url_prefix\n}\n\nexport const makeGaiaAssociationToken = (secretKeyHex: string, childPublicKeyHex: string ) => {\n  const LIFETIME_SECONDS = 365 * 24 * 3600\n  const signerKeyHex = secretKeyHex.slice(0, 64)\n  const compressedPublicKeyHex = getPublicKeyFromPrivate(signerKeyHex)\n  const salt = randomBytes(16).toString('hex')\n  const payload = {\n    childToAssociate: childPublicKeyHex,\n    iss: compressedPublicKeyHex,\n    exp: LIFETIME_SECONDS + (new Date().getTime() / 1000),\n    iat: Date.now() / 1000,\n    salt\n  }\n\n  const token = new TokenSigner('ES256K', signerKeyHex).sign(payload)\n  return token\n}\n","import { fromBase58 } from 'bip32'\nimport { getPublicKeyFromPrivate, makeAuthResponse } from 'blockstack'\n\nimport { IdentityKeyPair } from './utils/index'\nimport { getHubPrefix, makeGaiaAssociationToken } from './utils/gaia'\nimport AppsNode from './nodes/apps-node'\n\nexport default class Identity {\n  public keyPair: IdentityKeyPair\n  public address: string\n\n  constructor({ keyPair, address }: { keyPair: IdentityKeyPair; address: string; }) {\n    this.keyPair = keyPair\n    this.address = address\n  }\n\n  async makeAuthResponse({ appDomain, gaiaUrl, transitPublicKey, profile }: { \n    appDomain: string\n    gaiaUrl: string\n    transitPublicKey: string\n    profile?: {}\n  }) {\n    const appPrivateKey = this.appPrivateKey(appDomain)\n    const hubPrefix = await getHubPrefix(gaiaUrl)\n    const profileUrl = await this.profileUrl(hubPrefix)\n    // const appBucketUrl = await getAppBucketUrl(gaiaUrl, appPrivateKey)\n\n    const compressedAppPublicKey = getPublicKeyFromPrivate(appPrivateKey.slice(0, 64))\n    const associationToken = makeGaiaAssociationToken(this.keyPair.key, compressedAppPublicKey)\n\n    return makeAuthResponse(\n      this.keyPair.key,\n      profile || {},\n      '',\n      {\n        profileUrl\n      },\n      undefined,\n      appPrivateKey,\n      undefined,\n      transitPublicKey,\n      gaiaUrl,\n      undefined,\n      associationToken\n    )\n  }\n\n  appPrivateKey(appDomain: string) {\n    const { salt, appsNodeKey } = this.keyPair\n    const appsNode = new AppsNode(fromBase58(appsNodeKey), salt)\n    const appPrivateKey = appsNode.getAppNode(appDomain).getAppPrivateKey()\n    return appPrivateKey\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async profileUrl(gaiaUrl: string) {\n    // future proofing for code that may require network requests to find profile\n    return `${gaiaUrl}${this.address}/profile.json`\n  }\n}\n","import { generateMnemonic, mnemonicToSeed, validateMnemonic } from 'bip39'\nimport { fromSeed, BIP32Interface } from 'bip32'\nimport { randomBytes } from 'crypto-browserify'\n\nimport { getBlockchainIdentities, IdentityKeyPair } from './utils'\nimport { encrypt } from './encryption/encrypt'\nimport Identity from './identity'\n\nexport interface ConstructorOptions {\n  identityPublicKeychain: string\n  bitcoinPublicKeychain: string\n  firstBitcoinAddress: string\n  identityKeypairs: IdentityKeyPair[]\n  identityAddresses: string[]\n  encryptedBackupPhrase: string\n}\n\nexport class Wallet {\n  encryptedBackupPhrase: string\n  bitcoinPublicKeychain: string\n  firstBitcoinAddress: string\n  identityKeypairs: IdentityKeyPair[]\n  identityAddresses: string[]\n  identityPublicKeychain: string\n  identities: Identity[]\n\n  constructor({\n    encryptedBackupPhrase,\n    identityPublicKeychain,\n    bitcoinPublicKeychain,\n    firstBitcoinAddress,\n    identityKeypairs,\n    identityAddresses\n  }: ConstructorOptions) {\n    this.encryptedBackupPhrase = encryptedBackupPhrase\n    this.identityPublicKeychain = identityPublicKeychain\n    this.bitcoinPublicKeychain = bitcoinPublicKeychain\n    this.firstBitcoinAddress = firstBitcoinAddress\n    this.identityKeypairs = identityKeypairs\n    this.identityAddresses = identityAddresses\n    const identities: Identity[] = []\n    identityKeypairs.forEach((keyPair, index) => {\n      const address = identityAddresses[index]\n      const identity = new Identity({ keyPair, address })\n      identities.push(identity)\n    })\n    this.identities = identities\n  }\n\n  static async generate(password: string) {\n    const STRENGTH = 128 // 128 bits generates a 12 word mnemonic\n    const backupPhrase = generateMnemonic(STRENGTH, randomBytes)\n    const seedBuffer = await mnemonicToSeed(backupPhrase)\n    const masterKeychain = fromSeed(seedBuffer)\n    const ciphertextBuffer = await encrypt(Buffer.from(backupPhrase), password)\n    const encryptedBackupPhrase = ciphertextBuffer.toString()\n    return this.createAccount(encryptedBackupPhrase, masterKeychain)\n  }\n\n  static async restore(password: string, backupPhrase: string) {\n    if (!validateMnemonic(backupPhrase)) {\n      throw new Error('Invalid mnemonic used to restore wallet')\n    }\n    const seedBuffer = await mnemonicToSeed(backupPhrase)\n    const masterKeychain = fromSeed(seedBuffer)\n    const ciphertextBuffer = await encrypt(Buffer.from(backupPhrase), password)\n    const encryptedBackupPhrase = ciphertextBuffer.toString()\n    return this.createAccount(encryptedBackupPhrase, masterKeychain)\n  }\n\n  static createAccount(encryptedBackupPhrase: string, masterKeychain: BIP32Interface, identitiesToGenerate = 1) {\n    const walletAttrs = getBlockchainIdentities(masterKeychain, identitiesToGenerate)\n    return new this({\n      ...walletAttrs,\n      encryptedBackupPhrase\n    })\n  }\n}\n\nexport default Wallet\n","import Wallet from './wallet'\nexport { default as Wallet } from './wallet'\n\nexport default {\n  Wallet\n}\n"],"names":["AppNode","hdNode","appDomain","getAppPrivateKey","privateKey","Error","toString","getAddress","AppsNode","appsHdNode","salt","getNode","getAppNode","hash","createHash","update","digest","appIndex","hashCode","appNode","deriveHardened","toBase58","getSalt","APPS_NODE_INDEX","SIGNING_NODE_INDEX","ENCRYPTION_NODE_INDEX","IdentityAddressOwnerNode","ownerHdNode","getIdentityKey","getIdentityKeyID","publicKey","getAppsNode","getEncryptionNode","getSigningNode","IDENTITY_KEYCHAIN","BLOCKSTACK_ON_BITCOIN","getIdentityPrivateKeychain","masterKeychain","EXTERNAL_ADDRESS","CHANGE_ADDRESS","getBitcoinPrivateKeychain","BIP_44_PURPOSE","BITCOIN_COIN_TYPE","ACCOUNT_INDEX","getBitcoinAddressNode","bitcoinKeychain","addressIndex","chainType","chain","derive","getIdentityOwnerAddressNode","identityPrivateKeychain","identityIndex","isNeutered","publicKeyHex","node","address","toBase58Check","crypto","hash160","networks","bitcoin","pubKeyHash","string","length","i","character","charCodeAt","deriveIdentityKeyPair","identityOwnerAddressNode","identityKey","identityKeyID","appsNode","keyPair","key","keyID","appsNodeKey","getBlockchainIdentities","identitiesToGenerate","identityPrivateKeychainNode","bitcoinPrivateKeychainNode","identityPublicKeychainNode","neutered","identityPublicKeychain","bitcoinPublicKeychainNode","bitcoinPublicKeychain","firstBitcoinAddress","identityAddresses","identityKeypairs","identityKeyPair","push","encrypt","plaintextBuffer","password","mnemonic","encryptMain","encryptMnemonic","encryptedBuffer","validateMnemonic","normalizeMnemonic","normalizedMnemonic","plaintextNormalized","Buffer","from","randomBytes","keysAndIV","pbkdf2Sync","encKey","slice","macKey","iv","cipher","createCipheriv","cipherText","hmacPayload","concat","hmac","createHmac","hmacDigest","mnemonicToEntropy","getHubInfo","hubUrl","fetch","response","json","getHubPrefix","read_url_prefix","makeGaiaAssociationToken","secretKeyHex","childPublicKeyHex","LIFETIME_SECONDS","signerKeyHex","compressedPublicKeyHex","getPublicKeyFromPrivate","payload","childToAssociate","iss","exp","Date","getTime","iat","now","token","TokenSigner","sign","Identity","makeAuthResponse","gaiaUrl","transitPublicKey","profile","appPrivateKey","hubPrefix","profileUrl","compressedAppPublicKey","associationToken","undefined","fromBase58","Wallet","encryptedBackupPhrase","identities","forEach","index","identity","generate","STRENGTH","backupPhrase","generateMnemonic","mnemonicToSeed","seedBuffer","fromSeed","ciphertextBuffer","createAccount","restore","walletAttrs"],"mappings":"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"}